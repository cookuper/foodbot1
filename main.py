import logging
import json
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import asyncio  # –¥–æ–±–∞–≤–ª–µ–Ω–æ

API_TOKEN = '8066927688:AAFipaqyM4qoUODZ705PDocSZSSEEGWCVik'
PUPPETEER_URL = 'https://puppeteer-server-g0r7.onrender.com/generate?query='
USERS_FILE = 'users_counter.json'
START_FROM = 40

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º –µ–¥–∞"))
kb.add(KeyboardButton("üç¥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–ª—é–¥–∞"))
kb.add(KeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))
kb.add(KeyboardButton("üè¨ –ü–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"))

user_last_message = {}
user_state = {}

def get_user_count(user_id):
    try:
        with open(USERS_FILE, 'r') as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {"base_fake": START_FROM, "real_users": 0, "user_ids": []}

    if "user_ids" not in data:
        data["user_ids"] = []

    if user_id not in data["user_ids"]:
        data["real_users"] += 1
        data["user_ids"].append(user_id)
        with open(USERS_FILE, 'w') as f:
            json.dump(data, f)

    return data["base_fake"] + data["real_users"]

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    count = get_user_count(message.from_user.id)
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {count}", reply_markup=kb)

@dp.message_handler(lambda message: message.text.startswith("‚úç"))
async def handle_manual_input(message: types.Message):
    if message.chat.id in user_last_message:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=user_last_message[message.chat.id])
        except:
            pass
    sent = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ø—è—Ç–µ—Ä–æ—á–∫–∞ –ª–∞–ø—à–∞ –∫–æ–ª–∞ 700")
    user_last_message[message.chat.id] = sent.message_id
    user_state[message.chat.id] = "manual_input"

@dp.message_handler()
async def handle_message(message: types.Message):
    if message.text in ["üé≤ –†–∞–Ω–¥–æ–º –µ–¥–∞", "üç¥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–ª—é–¥–∞", "üè¨ –ü–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"]:
        user_state.pop(message.chat.id, None)

    if user_state.get(message.chat.id) == "manual_input":
        if message.text[0].isalpha():
            try:
                r = requests.get(PUPPETEER_URL + message.text)
                if message.chat.id in user_last_message:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=user_last_message[message.chat.id])
                    except:
                        pass
                sent = await message.answer("üß† –î—É–º–∞—é...\n" + r.text)
                user_last_message[message.chat.id] = sent.message_id
                user_state.pop(message.chat.id, None)
            except:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ø—è—Ç–µ—Ä–æ—á–∫–∞ –ª–∞–ø—à–∞ –∫–æ–ª–∞ 700")
        return

    if message.chat.id in user_last_message:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=user_last_message[message.chat.id])
        except:
            pass
    sent = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑.")
    user_last_message[message.chat.id] = sent.message_id

# üîß –¥–æ–±–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º webhook
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
